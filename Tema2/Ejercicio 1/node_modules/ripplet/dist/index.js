(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ripplet = factory());
}(this, (function () { 'use strict';

var __assign=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++){e=arguments[r];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);}return t};

var defaultOptions = {
    className: 'ripplet',
    color: 'rgba(0, 0, 0, .1)',
    opacity: null,
    spreadingDuration: '.4s',
    spreadingDelay: '0s',
    spreadingTimingFunction: 'ease-out',
    clearingDuration: '1s',
    clearingDelay: '0s',
    clearingTimingFunction: 'ease-in-out',
};
function ripplet(targetSuchAsMouseEvent, options) {
    return generateRipplet(targetSuchAsMouseEvent, options ? __assign({}, defaultOptions, options) : defaultOptions);
}
function generateRipplet(_a, options) {
    var target = _a.currentTarget, clientX = _a.clientX, clientY = _a.clientY;
    var doc = document;
    var targetRect = target.getBoundingClientRect();
    var containerElement = doc.body.appendChild(doc.createElement('div'));
    {
        var targetStyle = window.getComputedStyle(target);
        var containerStyle_1 = containerElement.style;
        containerStyle_1.position = 'absolute';
        containerStyle_1.overflow = 'hidden';
        containerStyle_1.pointerEvents = 'none';
        containerStyle_1.left = targetRect.left + doc.documentElement.scrollLeft + doc.body.scrollLeft + "px";
        containerStyle_1.top = targetRect.top + doc.documentElement.scrollTop + doc.body.scrollTop + "px";
        containerStyle_1.width = targetRect.width + "px";
        containerStyle_1.height = targetRect.height + "px";
        containerStyle_1.zIndex = "" + ((targetStyle.zIndex && parseInt(targetStyle.zIndex, 10) || 0) + 1);
        containerStyle_1.borderTopLeftRadius = targetStyle.borderTopLeftRadius;
        containerStyle_1.borderTopRightRadius = targetStyle.borderTopRightRadius;
        containerStyle_1.borderBottomLeftRadius = targetStyle.borderBottomLeftRadius;
        containerStyle_1.borderBottomRightRadius = targetStyle.borderBottomRightRadius;
        containerStyle_1.transitionProperty = 'opacity';
        containerStyle_1.transitionDuration = options.clearingDuration;
        containerStyle_1.transitionTimingFunction = options.clearingTimingFunction;
        containerStyle_1.transitionDelay = options.clearingDelay;
        containerStyle_1.opacity = '1';
        setTimeout(function () { return containerStyle_1.opacity = '0'; });
    }
    var rippletElement = containerElement.appendChild(doc.createElement('div'));
    rippletElement.className = options.className || '';
    {
        var distanceX = Math.max(clientX - targetRect.left, targetRect.right - clientX);
        var distanceY = Math.max(clientY - targetRect.top, targetRect.bottom - clientY);
        var radius = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
        var rippletStyle_1 = rippletElement.style;
        rippletStyle_1.backgroundColor = options.color;
        rippletStyle_1.opacity = options.opacity;
        rippletStyle_1.width = radius * 2 + "px";
        rippletStyle_1.height = radius * 2 + "px";
        rippletStyle_1.marginLeft = clientX - targetRect.left - radius + "px";
        rippletStyle_1.marginTop = clientY - targetRect.top - radius + "px";
        rippletStyle_1.borderRadius = '50%';
        rippletStyle_1.transitionProperty = 'transform';
        rippletStyle_1.transitionDuration = options.spreadingDuration;
        rippletStyle_1.transitionTimingFunction = options.spreadingTimingFunction;
        rippletStyle_1.transitionDelay = options.spreadingDelay;
        rippletStyle_1.transform = 'scale(0)';
        setTimeout(function () { return rippletStyle_1.transform = 'scale(1)'; });
    }
    containerElement.addEventListener('transitionend', function (event) {
        event.propertyName === 'opacity' && this.parentNode.removeChild(this);
    });
    return containerElement;
}


var named = Object.freeze({
	defaultOptions: defaultOptions,
	default: ripplet
});

var index_umd = Object.keys(named).reduce(function (exporting, name) { return (exporting[name] = named[name], exporting); }, ripplet);

return index_umd;

})));
